---
title: Ruby for pentesters
short:
date: 2017-06-27 15:55 UTC
tags: ruby, security, pentesting, owasp, rails security, ruby security, pentest, Ruby for pentesters, pentesting for rubyists
category: security

---
#Ruby for Pentesters(or Pentesting for Rubyists)

Hello all =) Couple weeks ago I had a talk on the very first [OWASP Kyiv Chapter](https://www.owasp.org/index.php/Kyiv) meetup and this particular article is a short overview of my presentation. Here you can find a brief list of tools, services, some suggestions, and comments, described in the talk. Hope you find something interesting here =)

The presentation itself can be found at: [slideshare.net/owaspKyiv](https://www.slideshare.net/owaspKyiv/roman-rott-ruby-for-pentesters).

<img class='blog-image' title="MacDown logo", alt="MacDown logo", src="/images/blog/ruby-for-pentesters/presentation_intro.png"/>



##OWASP?
OWASP is "an open community dedicated to enabling organizations to conceive, develop, acquire, operate, and maintain applications that can be trusted." 

In short words, OWASP project is a worldwide nonprofit organization that wants to improve the security of software, including web-apps.



##OWASP Kyiv?
The OWASP Chapters program helps to enhance local discussion of application security around the world and is open to anyone interested in learning more about software security. Recently, two friends of mine re-opened Kyiv chapter to populate this subject among Ukrainian developers, researchers, DevOps, managers, and others :)

If you are interested, feel free to send your talk submissions to [vlad.styran@owasp.org](mailto:vlad.styran@owasp.org) and [ihor.bliumental@owasp.org](mailto:ihor.bliumental@owasp.org). They encourage the community to submit talks on a broad variety of Application Security related topics. Please mail them the title and description of your talk and your brief bio, and they will get back to you soon. I promise!



## Why Ruby?

I'm a Ruby/JS programmer and from my point of view, when it comes to coding your scripts for automating your day-to-day security auditing routine, there are no limitations to Ruby compared to other languages like Python or PHP, popular among the community. First of all, Ruby is available on all Macs by default, it can be easily installed on Linux(is pre-installed on some of them), it works on Windows(with a little headache, probably). Secondary, it is really easy to read, understand and update code written in Ruby for almost anybody as it supports multiple paradigms so you don't need to learn a new one =) Ruby can be extended using native C library, existing tools written in C or even bridged to other languages like Java. And last, but not least - Ruby community is a really huge, open and friendly so you always be able to find an answer or solution to almost all of issues you may face. 



----



## Tools overview.

Coming into infosec from Ruby development, it was cool to see such a widely used tool that's written in Ruby and the very next part of this blog post is a short list of such tools:


### 1. Ronin
**Website:** [http://ronin-ruby.github.io/](http://ronin-ruby.github.io/)

**GitHub:** [https://github.com/ronin-ruby/](https://github.com/ronin-ruby/)

Ronin is a Ruby platform for vulnerability research and exploit development. Ronin allows for the rapid development and distribution of code, Exploits, Payloads, Scanners, etc., via Repositories.

<img class='blog-image' title="Ronin - platform for pentesters", alt="Ronin - platform for pentesters", src="/images/blog/ruby-for-pentesters/ronin_platform_for_pentesters.png"/>


### 2. WPScan
**Website:** [https://wpscan.org/](https://wpscan.org/)

**GitHub:** [https://github.com/wpscanteam/wpscan](https://github.com/wpscanteam/wpscan)

WPScan is a black box WordPress vulnerability scanner that can be used to scan websites based on WordPress to find security. It can scan and enumerate any plugins that are installed, provide links to CVEs, shows hints, dangers, other info. 

<img class='blog-image' title="WPScan WordPress vulnerability scanner", alt="WPScan WordPress vulnerability scanner", src="/images/blog/ruby-for-pentesters/wpscan_main_page_for_pentesters.png"/>

<img class='blog-image' title="WPScan WordPress vulnerability scanner resultss", alt="WPScan WordPress vulnerability scanner results", src="/images/blog/ruby-for-pentesters/wpscan_test_result_for_pentesters.png"/>


### 3. WhatWeb
**Website:** [https://www.morningstarsecurity.com/research/whatweb](https://www.morningstarsecurity.com/research/whatweb)

**GitHub:** [https://github.com/urbanadventurer/WhatWeb](https://github.com/urbanadventurer/WhatWeb)

WhatWeb identifies websites. WhatWeb recognizes web technologies including CMS, blogging platforms, statistic/analytics packages, JavaScript libraries, web servers, and embedded devices. WhatWeb has over 1700 plugins, each to recognize something different. WhatWeb also identifies version numbers, email addresses, account IDs, web framework modules, SQL errors, and more.

<img class='blog-image' title="WhatWeb scanner results", alt="WhatWeb scanner results", src="/images/blog/ruby-for-pentesters/whatweb_scanner_work_results.png"/>


### 4. bundle-audit
**GitHub:** [https://github.com/rubysec/bundler-audit](https://github.com/rubysec/bundler-audit)

Patch-level verification for [Bundler](https://github.com/carlhuda/bundler#readme). It checks for vulnerable versions of gems in `Gemfile.lock`, prints advisory information and can be useful for testing Ruby-based apps in case you have its source code(or just `Gemfile.lock`)

<img class='blog-image' title="bundle-audit scanner results", alt="bundle-audit scanner results", src="/images/blog/ruby-for-pentesters/bundle-audit_example.png"/>


### 5. Brakeman
**Website:** [http://brakemanscanner.org/](http://brakemanscanner.org/)

**GitHub:** [https://github.com/presidentbeef/brakeman](https://github.com/presidentbeef/brakeman)

Brakeman is a static analysis tool which checks Ruby on Rails applications for security vulnerabilities. It's the same can be useful in case of open-box testing when you have access to the apps' source. It generates a list of potential and sometimes real issues and saves them into an HTML file with a detailed description.

<img class='blog-image' title="Brakeman scanner results", alt="Brakeman scanner results", src="/images/blog/ruby-for-pentesters/brakeman_auditing_tool.png"/>


### 6. Arachni
**Website:** [http://www.arachni-scanner.com/](http://www.arachni-scanner.com/)

Arachni is a modular Ruby framework aimed towards helping penetration testers and administrators evaluate the security of web apps.

<img class='blog-image' title="Arachni framework", alt="Arachni framework", src="/images/blog/ruby-for-pentesters/arahni_web_scanner.png"/>
<img class='blog-image' title="Arachni scanner results", alt="Arachni scanner results", src="/images/blog/ruby-for-pentesters/arahni_web_scanner_results.png"/>


### 7. BeEF
**Website:** [http://beefproject.com/](http://beefproject.com/)

**GitHub:** [https://github.com/beefproject/beef](https://github.com/beefproject/beef)

BeEF is short for The Browser Exploitation Framework. It is a penetration testing tool that focuses on the web browser. BeEF will hook one or more web browsers and use them as beachheads for launching directed command modules and further attacks against the system from within the browser context.

<img class='blog-image' title="BeEF framework main page", alt="BeEF framework main page", src="/images/blog/ruby-for-pentesters/beef_framework_main_page.png"/>
<img class='blog-image' title="BeEF framework example", alt="BeEF framework example", src="/images/blog/ruby-for-pentesters/beef_framework_example.png"/>


### 8. Metasploit
**Website:** [https://www.metasploit.com/](https://www.metasploit.com/)

World's most used penetration testing software. Nothing to say there - everybody in infosec knows it, and yes, it is written using Ruby =)

<img class='blog-image' title="Metasploit", alt="Metasploit", src="/images/blog/ruby-for-pentesters/metasploit.png"/>


----



##Scripted Pen-Testing, Automatization

It is common to use OOP in Ruby(actually it is a best practice, here) so you can write your own script, for example, to fetch the whole website, save its content into an object, parse it using one of Ruby parses, analyse, open interesting pages in a browser, put payloads into forms, submit them, create screenshots and save them in a folder to analyse manually. All in one script. It' absolutely great, is not it? 

You may find next gems pretty interesting:

- [**Oga**](https://github.com/YorickPeterse/oga) - XML/HTML parser
- [**html-pipeline**](https://github.com/jch/html-pipeline) - GitHub HTML processing filters and utilities. This module includes a small framework for defining DOM based content filters and applying them to user provided content.  
- [**Happymapper**](https://github.com/dam5s/happymapper) allows you to parse XML data and convert it quickly and easily into ruby data structures.
- [**nokogiri**](https://github.com/sparklemotion/nokogiri) - is a Rubygem providing HTML, XML, SAX, and Reader parsers with XPath and CSS selector support.
- [**ruby-nmap**](https://github.com/sophsec/ruby-nmap) - a Ruby interface to [nmap](http://www.insecure.org/), the exploration tool and security / port scanner.
- [**selenium**](http://www.seleniumhq.org/) - is for automating web applications for testing purposes, but is certainly not limited to just that ;)
- [**Watir**](http://watir.github.io/) - ruby library for automating tests. Watir interacts with a browser the same way people do: clicking links, filling out forms and validating text.

<img class='blog-image' title="ruby-nmap example", alt="ruby-nmap example", src="/images/blog/ruby-for-pentesters/ruby-nmap_example.png"/>


----


## Recomendations
- I sugges reading ["RubyFu, where Ruby goes evil!"](https://www.gitbook.com/book/rubyfu/rubyfu/details) book by [@Rubyfu](https://twitter.com/rubyfu) This book is a collection of ideas, tricks and skills that could be useful for Hackers. 

- [Kali Linux](https://www.kali.org/) - It has dozens screepts and tools pre-installed, including almost all of the described above.







